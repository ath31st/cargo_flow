version: '3.7'

services:
  #  minio:
  #    image: minio/minio:latest
  #    command: server --console-address ":9001" /data/
  #    ports:
  #      - "9000:9000"
  #      - "9001:9001"
  #    environment:
  #      MINIO_ROOT_USER: test
  #      MINIO_ROOT_PASSWORD: test
  #    volumes:
  #      - minio:/data

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.0
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: qwe123
    volumes:
      - ./keycloak/realms/cargo-flow-realm.json:/opt/keycloak/data/import/realm.json
    ports:
      - "8080:8080"
    command:
      - start-dev
      - --import-realm
      - --features admin-fine-grained-authz

  rabbitmq:
    image: 'bitnami/rabbitmq:latest'
    ports:
      - '15672:15672'
      - '5672:5672'

  zookeeper:
    image: wurstmeister/zookeeper:latest
    hostname: zookeeper
    container_name: ern_zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - test_network

  broker:
    image: 'bitnami/kafka:3.5.1'
    hostname: broker
    depends_on:
      - zookeeper
    restart: always
    ports:
      - '9092:9092'
      - '29092:29092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: broker
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_BROKER_ID: 0
      KAFKA_LISTENERS: EXTERNAL_SAME_HOST://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL_SAME_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_SAME_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - test_network

  discovery:
    build: ./discovery_service
    ports:
      - "8761:8761"
    networks:
      - test_network

  postgres-container:
    image: postgres:15.5
    container_name: postgres-container
    ports:
      - "5432:5432"
    command: -p 5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cargo_flow_db
    restart: on-failure
    volumes:
      - "database:/var/lib/postgresql/data"
      - "./scripts/init-schemas.sql:/docker-entrypoint-initdb.d/init-schemas.sql"

  mongodb-container:
    image: mongo:7.0.11
    container_name: mongodb-container
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    volumes:
      - "./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js"
      - "mongodb_data:/data/db"
    networks:
      - test_network

networks:
  test_network:

volumes:
  database:
  mongodb_data:
  minio:
